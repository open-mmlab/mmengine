name: merge_stage_test

on:
  push:
    paths-ignore:
      - ".github/**.md"
      - "docker/**"
      - "docs/**"
      - "README.md"
      - "README_zh-CN.md"
      - "CONTRIBUTING.md"
      - "CONTRIBUTING_zh-CN.md"
      - ".pre-commit-config.yaml"
      - ".pre-commit-config-zh-cn.yaml"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_cpu_py:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: [3.6, 3.8, 3.9]
        torch: [1.8.1]
        include:
          - torch: 1.8.1
            torchvision: 0.9.1
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip
        run: pip install pip --upgrade
      - name: Install PyTorch
        run: pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html
      - name: Build MMEngine from source
        run: pip install -e . -v
      - name: Install unit tests dependencies
        run: |
          pip install -r requirements/tests.txt
          pip install openmim
          mim install 'mmcv>=2.0.0rc1'
      - name: Run unittests and generate coverage report
        run: |
          coverage run --branch --source mmengine -m pytest tests/
          coverage xml
          coverage report -m

  build_cpu_pt:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: [3.7]
        torch: [1.6.0, 1.7.1, 1.8.1, 1.9.1, 1.10.1, 1.11.0, 1.12.0]
        include:
          - torch: 1.6.0
            torchvision: 0.7.0
          - torch: 1.7.1
            torchvision: 0.8.2
          - torch: 1.8.1
            torchvision: 0.9.1
          - torch: 1.9.1
            torchvision: 0.10.1
          - torch: 1.10.1
            torchvision: 0.11.2
          - torch: 1.11.0
            torchvision: 0.12.0
          - torch: 1.12.0
            torchvision: 0.13.0
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip
        run: pip install pip --upgrade
      - name: Install PyTorch
        run: pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html
      - name: Build MMEngine from source
        run: pip install -e . -v
      - name: Install unit tests dependencies
        run: |
          pip install -r requirements/tests.txt
          pip install openmim
          mim install 'mmcv>=2.0.0rc1'
      - name: Run unittests and generate coverage report
        run: |
          coverage run --branch --source mmengine -m pytest tests/
          coverage xml
          coverage report -m
      # Only upload coverage report for python3.7 && pytorch1.8.1 cpu
      - name: Upload coverage to Codecov
        if: ${{matrix.torch == '1.8.1' && matrix.python-version == '3.7'}}
        uses: codecov/codecov-action@v1.0.14
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: false

  build_cu102:
    runs-on: ubuntu-18.04
    container:
      image: pytorch/pytorch:1.8.1-cuda10.2-cudnn7-devel
    env:
      MKL_THREADING_LAYER: GNU
    strategy:
      matrix:
        python-version: [3.7]
        include:
          - torch: 1.8.1
            cuda: 10.2
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip
        run: pip install pip --upgrade
      - name: Fetch GPG keys
        run: |
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub
          apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub
      - name: Install system dependencies
        run: apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6
      - name: Build MMEngine from source
        run: pip install -e . -v
      - name: Install unit tests dependencies
        run: |
          pip install -r requirements/tests.txt
          pip install openmim
          mim install 'mmcv>=2.0.0rc1'
      - name: Run unittests and generate coverage report
        run: |
          coverage run --branch --source mmengine -m pytest tests/
          coverage xml
          coverage report -m

  build_windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022]
        python: [3.7]
        platform: [cpu, cu111]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip
        # Windows CI could fail If we call `pip install pip --upgrade` directly.
        run: python -m pip install pip --upgrade
      - name: Install PyTorch
        run: pip install torch==1.8.1+${{matrix.platform}} torchvision==0.9.1+${{matrix.platform}} -f https://download.pytorch.org/whl/lts/1.8/torch_lts.html
      - name: Build MMEngine from source
        run: pip install -e . -v
      - name: Install unit tests dependencies
        run: |
          pip install -r requirements/tests.txt
          pip install openmim
          mim install 'mmcv>=2.0.0rc1'
      - name: Run CPU unittests
        run: pytest tests/
        if: ${{ matrix.platform == 'cpu' }}
      - name: Run GPU unittests
        # Skip testing distributed related unit tests since the memory of windows CI is limited
        run: pytest tests/ --ignore tests/test_dist --ignore tests/test_optim/test_optimizer/test_optimizer_wrapper.py --ignore tests/test_model/test_wrappers/test_model_wrapper.py
        if: ${{ matrix.platform == 'cu111' }}
